# Since our images are in a private repository, a docker registry secret will need to be created in advance to access our repo
# This secret must be available in the same namespace where the helm chart will be installed to.
# kubectl create secret docker-registry actian-registrykey --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword> --docker-email=<your-email>
# Populate imagePullSecrets as follows once set up:
#imagePullSecrets:
#  - actian-registrykey
imagePullSecrets: []
image: actian/datacloud-worker:3.0.3-rc
imagePullPolicy: IfNotPresent
dcEngineImage: actian/dataconnect-engine:12.0.0-31
dcEngineImagePullPolicy: IfNotPresent
dcOdbcImage: actian/datacloud-odbc:1.0.0-139
dcOdbcImagePullPolicy: IfNotPresent
namespaced:
revisionHistoryLimit: 10
resultsQueue: JOB_RESULTS
extraEnvVars: []
tolerations: []
  # - key: "example-key"
  #   operator: "Exists"
  #   effect: "NoSchedule"
affinity: {}
#   affinity:
#     podAntiAffinity:
#       preferredDuringSchedulingIgnoredDuringExecution:
#       - weight: 1
#         podAffinityTerm:
#           labelSelector:
#             matchLabels:
#               app: integration-manager-worker
#           topologyKey: kubernetes.io/hostname
livenessProbe:
  httpGet:
    scheme: HTTP
    path: /worker/health
    port: 5000
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3
existingRabbitSecret:
# Must have the keys:
#   rabbitmq-host
#   rabbitmq-username
#   rabbitmq-password
existingSecret: ""
replicaCount: 1
pdb: {}
  #minReplicas: 1
extraConfig: {}
extraLabels: {}
podAnnotations: {}
resources: {}
nodeSelector: {}
# Extra volumes for deployment
extraVolumes: []
# Extra volume mounts for deployment
extraVolumeMounts: []
concurrency: 1
# Amount of time to wait for current jobs to finish before forceful shutdown
terminationGracePeriodSeconds: 172800
destinationId:

# AMQP Configuration - Must use AMQP version 0-9-1
amqp:
  # Set host to rabbitmq-rabbitmq-ha.default.svc.cluster.local if using helm rabbitmq-ha
  host:
  # Set port to 15672 if using helm rabbitmq-ha
  port: 5672
  # Set if not using existingRabbitSecret
  username:
  password:
  ssl: false

existingLicenseSecret:
# Must have the key:
#   cosmos.slc

dc12license:
# Example License Config
#dc12license: |
#  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
#
#  <!-- Do not modify this file.  It is digitally signed. -->
#  <!--License Signer Version: v11-->
#  <License>
#    ...
#  </License>
gcpSecret:
# Example secret file
 #| {"type": "service_account",
 # "project_id":
 # "private_key_id":
#"private_key":
#"client_email":
#"client_id":
#"auth_uri":
#"token_uri":
#"auth_provider_x509_cert_url":
#"client_x509_cert_url":
#}
externalSecrets:
  enabled: false
  backendType:
  keyVaultName:
  keyName:
  keyProperty:
dockerConfiguration:

serviceAccount:
  annotations: {}

podSecurityContext: {}
#  fsGroup: 2000
#  runAsNonRoot: true

securityContext: {}
#  # capabilities:
#  #   drop:
#  #   - ALL
#  privileged: false
#  allowPrivilegeEscalation: false
#  runAsUser: 1000
#  runAsGroup: 3000
#  #fsGroupChangePolicy: "OnRootMismatch"
#  runAsNonRoot: true
#  readOnlyRootFilesystem: true

dcEngineSecurityContext: {}
#  # capabilities:
#  #   drop:
#  #   - ALL
#  privileged: false
#  allowPrivilegeEscalation: false
#  runAsUser: 1000
#  runAsGroup: 3000
#  #fsGroupChangePolicy: "OnRootMismatch"
#  runAsNonRoot: true
#  readOnlyRootFilesystem: true

engineLogSecurityContext:
  #  privileged: false
  #  runAsUser: 0
  #  runAsNonRoot: false

dcOdbcSecurityContext:
  #  privileged: false
  #  runAsUser: 0
  #  runAsNonRoot: false

logstream:
  enabled: false
  hostPath: "/opt/Actian/local/work/job"
busybox:
  image:
    repository: busybox
    tag: 1.30.1
    pullPolicy: IfNotPresent

dfEngineImage: actian/dataflow-engine:7.0.2-51
dfEngineImagePullPolicy: IfNotPresent
dfEngineSecurityContext: {}

linkEngineImage: actian/link-flow-command-server-standalone-installer:10.9.9.9_911
linkEngineImagePullPolicy: IfNotPresent
linkEngineSecurityContext: {}
#  # capabilities:
#  #   drop:
#  #   - ALL
#  privileged: false
#  allowPrivilegeEscalation: false
#  runAsUser: 1000
#  runAsGroup: 3000
#  #fsGroupChangePolicy: "OnRootMismatch"
#  runAsNonRoot: true
#  readOnlyRootFilesystem: true
